<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Songlin</title>
    <link>https://tantalus13a98b5f.github.io/posts/</link>
    <description>Recent content in Blog on Songlin</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://tantalus13a98b5f.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Cannot use `:cnext` in `:Gclog`</title>
      <link>https://tantalus13a98b5f.github.io/posts/vim-qf-valid/</link>
      <pubDate>Mon, 10 Feb 2020 12:29:09 +0800</pubDate>
      
      <guid>https://tantalus13a98b5f.github.io/posts/vim-qf-valid/</guid>
      <description>Using Vim 7.4 for CentOS 7.6. After installing fugitive.vim, :Gclog will open up commits in the quickfix window. However, :cnext and :cprev do not work.
I am suspecting that Vim 7.4 does not support setting the valid property on setqflist, and :cnext will not respect the invalid entries.
For short, we need tmux 2.6 and Vim 8.0. Come on, CentOS 8.</description>
    </item>
    
    <item>
      <title>Tmux Scrolling Issues</title>
      <link>https://tantalus13a98b5f.github.io/posts/tmux-scroll/</link>
      <pubDate>Wed, 29 Jan 2020 19:37:16 +0800</pubDate>
      
      <guid>https://tantalus13a98b5f.github.io/posts/tmux-scroll/</guid>
      <description>less inside tmux does not scroll.
 https://github.com/tmux/tmux/issues/1320 WheelUp key shift-scroll  htop issue
 https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=700491 .config/htop/htoprc  </description>
    </item>
    
    <item>
      <title>My Command Line Solution Roundup - 2019</title>
      <link>https://tantalus13a98b5f.github.io/posts/cmdline-2019/</link>
      <pubDate>Fri, 24 Jan 2020 20:07:37 +0800</pubDate>
      
      <guid>https://tantalus13a98b5f.github.io/posts/cmdline-2019/</guid>
      <description>在这个时间节点上，还是稍微来整理下过去这一年以来在命令行工具方面的积累吧。过去的一年也是我在命令行中工作地越来越多的一年——中学的时候写了不少东西，学了不少操作，但是现在看来，其实都非常地扁平；随着项目规模的扩大，还是需要更好地工具来武装自己，提高效率。
另外一点就是，有时候我们会觉得在图形环境下很容易工作，但在命令行环境下感到困难。所以我觉得一个比较有帮助的事情是，来整理一下我们如何使用一些图形的、集成的工具，从需求的角度出发，来整理命令行的使用技巧。
Here we go!
Why Windows 往前两年特别痴迷于Linux环境，那时候觉得nautilus和gnome-terminal都是工作必备——我至今觉得nautilus是世界上最好的文件管理器，Linux上的Terminal选择范围也要大很多。但很遗憾，我的工作全部并不只是文件管理器和命令行，我还要上课，还要修图，还要摸鱼。所以，借着换新电脑的契机，我重新开始将Windows作为主要平台。
 Git for Windows是个非常好的工具，提供了SSH和Git这种基本工具，还提供了个Bash工具箱；当然，没啥扩展性。微软近年来也推出了WSL，不过细想还是有很多坑，比如WSL的API不健全，桥接的文件系统，糟糕的IO性能，以及操作上其他GUI工具如何使用WSL中的工具？尤其是如果涉及到SSH和Git，其中其实是有一些坑点的；这些都并非不能解决的问题，但都是需要解决的问题，所以我还是在用着Git Bash，用着Native的Python。但WSL也并非没有用处，我依赖WSL来作为Git Bash的补充，在里面查看manpage、安装编译器等工具。两者互为补充，在大部分时候已经可以替代Linux了，我还放了一个Xubuntu的虚拟机作为备用。
关于文件系统，NTFS上当然不存在权限设置，但是实际使用中这并不是一件特别糟糕的事情，Git for Windows默认设置了权限不敏感，如果要设置一个文件的权限可以用update-index，而且大部分时候其实都是clone现有的repo，所以对Git来说没啥影响；反而，不要用WSL里的Git。软链的话，NTFS其实是支持的，可以在cmd里用mklink指令，而且Win10现在打开开发者模式就可以不需要管理员权限了。真正比较大的影响其实是路径大小写不敏感，放到NTFS上可能会出现路径相互覆盖。
总之，NTFS是个麻烦，但现在都能绕开了，应该说赶上了MSYS成熟、WSL启动的好时代；Linux上有的工具确实是神一般的好用，但代价是另外有的工具几乎就不可用。mac么，早年有人说他兼具Windows与Linux之长，但实际上也是兼具两者之短，键盘和接口上的遗憾也是很大的问题。
Why Git Bash 关于Terminal的选择，我还是尝试了不少选择，最终最喜欢的还是Git for Windows自带的Git Bash (MinTTY)。简单，快速，功能齐全，除了没有标签页，没有什么好抱怨的。 MobaXterm也是个好东西，自带X Server，让我偶尔连集群图形不再需要Linux虚拟机或者x2go，但我对于启动速度并不怎么满意，其配置的眼花缭乱也令我敬而远之。对ConEmu的远离大抵也是因此，更何况我都没有把鼠标的问题解决出来。我也尝试过 hyper之类基于Electron的方案，在里面跑Git Bash的Shell，在解决了一些问题之后也还不错，但并不明显由于MinTTY吧。Windows Terminal初听觉得石破天惊，但是到现在仍然处于beta，也就不再提了。
值得一提的是，我很喜欢 Termius，跨平台，可以同步（虽然我没有），而且还挺好看。不过在Windows客户端也没有标签页，虽然多窗口是有的，这本质上是个SSH客户端，但也可以执行本机shell，Git Bash是可以的，各种功能支持也还算健全。
前面说过，Git Bash是一个很不错的工具箱。SSH命令行，能够支持端口转发之类的功能，能够自己控制自己的密钥；sed、awk等脚本神器；一个简单的vim。我一度通过Git Bash来做一些Windows管理的工作，比如打包配置文件，还写了一些成规模的Shell脚本，但当然，我现在还是都回归了Native Python来完成这些工作——更好的可维护性，更好的性能，还是很香的。
更重要的一点是，Git Bash其实是个非常不错的Launcher。自带winpty，可以执行powershell和cmd，也可以安装 wslbridge，这个工具支持了广受赞誉的wsltty。
我的Git Bash配置 我基本上是香草（vanilla）派，外观上没有做太多的定制，从功能上倒是做了些修改。Git Bash主要还是用来连SSH，所以定制也还是从这方面着手。
开始入门SSH的时候基本上看的是GitHub的 手册，从生成密钥开始，后来又觉得明文密钥不安全，于是加上了口令。然而加入口令后麻烦其实真的不少：IDE里git不能用了，每次命令行连接也都要输密码，不过好歹每台服务器输的是同样的密码。
Git Bash没有标签页也算是个问题。我也试过基于Electron的方案，比如VSCode，Termius之类的，接着就发现中文也不支持了，alias也不全了。检查了一下，发现是login shell的问题。于是我开始在.bashrc里source一些基本的profile。
在这个过程中，发现了start-ssh-agent.cmd这么个脚本，自此开始折腾agent。想法很简单，开机启动agent，然后之后的ssh就都可以不用重复输密码了。但是Windows上不存在Login Shell，那环境变量该存在哪里呢？我试着用setx设Windows环境变量，效果很好，git也能够在VSCode里用了。但使用中还是有问题，经常会有智障清理软件把Socket File给删掉，这样的话agent就必须杀掉重新起；在VSCode里起起来的Git Bash会从Code继承旧的环境变量，结果还是会连不上agent。于是最近更新了一次，每次启动Git Bash都尝试启动agent，而且把环境存在一个文件中，这样每个子shell可以自己加载环境，不受继承的影响。
另外我还做了一个基于.ssh/config的SSH Host补全。上述的这些功能我都放在 我的GitHub上了。
我的Shell配置 早年还是用过 Oh My Zsh的，一开始觉得这东西好用又好看，然而回到Windows上，这就成了大坑。Git Bash里没带ZSH，那就用WSL吧；结果放在WSL上，严重拖慢启动速度。我最近回头看ZSH的配置，发现很多人其实都不推崇OMZ这个配置，认为Git Branch显示就是个坑。当然而且，Windows上的各个Terminal和其中的字体对于OMZ里用到的字符支持都不算好，这加速了我的退坑。
以使用服务器为契机，我还是主要使用Bash了。作为香草派，我的PS1设置还是很简单的：以Debian的设置为基础，把全路径名换成了路径末端名。这样的话路径显示不会太长，而且不同的命令之间色彩上能看出来隔离。
我对ZSH的特性利用还是比较局限，用的最多的就是上翻历史。当然，知道了Bash里的^r快捷键之后，我觉得Bash的体验也可以接受了。
在调CESM的时候意识到，命令行用起来烦的一个很重要的原因是在不同的路径间切换很麻烦。ZSH在这方面的支持其实比较不错，但我当时因为没有需求并没有去了解。当然，有一些外部的工具，如autojump之类的，可以统计频率，局部匹配，自动跳转；但速度也是个问题，而且毕竟不原生。我另外用过的一个办法是mc——Midnight Commander这个文件管理器可以两个路径并排，并分别进入对应路径的Shell。好用是好用，但只能支持两个路径嘛，而且我有一次犯了糊涂进了嵌套mc，结果相当惨烈。
也许这个需求可以用tmux来解决？然而工作区并不一定能够继续划分。我最近用得比较多的是Bash里的pushd功能，相当于是一个简易的标签页——这就和图形的操作比较像了。虽然手动了一点，但是方便和效率上都还是不输的。</description>
    </item>
    
    <item>
      <title>Clang: Don&#39;t Touch My Code!</title>
      <link>https://tantalus13a98b5f.github.io/posts/clang-no-opt/</link>
      <pubDate>Fri, 24 Jan 2020 16:31:37 +0800</pubDate>
      
      <guid>https://tantalus13a98b5f.github.io/posts/clang-no-opt/</guid>
      <description>Clang/LLVM is a toolchain that is widely adopted by both researchers and the industry. Based on LLVM, compilers for new targets are built, and program analysis solutions are developed, thanks to the well-defined LLVM IR. Nevertheless, Clang/LLVM is also famous for some of its strange (often just &amp;ldquo;different&amp;rdquo; from gcc) behaviors and very aggressive optimizations.
Recently I am working on LLVM (7.0) for program analysis and instrumentation, and I think it&amp;rsquo;s time to write about how we are dealing with unwanted optimizations.</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://tantalus13a98b5f.github.io/posts/hello-world/</link>
      <pubDate>Thu, 02 Jan 2020 23:25:55 +0800</pubDate>
      
      <guid>https://tantalus13a98b5f.github.io/posts/hello-world/</guid>
      <description>Hi, this is Tantalus. I&amp;rsquo;m going to write about my life and my explorations. Cheers!</description>
    </item>
    
  </channel>
</rss>